lung_dna_plate2_parsed,
immune_mrna_plate1_parsed,
immune_mrna_plate2_parsed,
liver_mrna_plate1_parsed,
liver_mrna_plate2_parsed,
lung_mrna_plate1_parsed,
lung_mrna_plate2_parsed,
muscle_mrna_plate1_parsed,
muscle_mrna_plate2_parsed)
# Create a data frame for all the size readings
size_data <- rbind(size_mrna_parsed,
size_dna_parsed)
# Create a data frame for all the incorporation efficiency readings
incorporation_data <- rbind(incorporation_mrna_parsed,
incorporation_dna_parsed)
# Join the tables together
all_data <- tfx_data %>%
# Inner join the size tables on the formulation_id, nucleic acid type, and incorporation type
inner_join(size_data, by = c('formulation_id', 'nucleic_acid', 'incorporation')) %>%
# Inner join the incorporation efficiency tables on the formulation_id, nucleic acid type, and incorporation type
inner_join(incorporation_data, by = c('formulation_id', 'nucleic_acid', 'incorporation')) %>%
# Inner join the formulation components table by formulation_id
inner_join(formulation_components, by = 'formulation_id')
# Reorder columns for better legibility
all_data <- all_data[ ,c(1, 11, 12, 13, 14, 15, 9, 10, 2, 3, 4, 5, 6, 7, 8)]
# Recode categorical variables as factors.
all_data$formulation_id <- as.factor(all_data$formulation_id)
all_data$cell_type <- as.factor(all_data$cell_type)
all_data$plate_number <- as.factor(all_data$plate_number)
all_data$nucleic_acid <- as.factor(all_data$nucleic_acid)
all_data$incorporation <-as.factor(all_data$incorporation)
all_data$dose <- as.factor(all_data$dose)
# Determine the number of NA values in each response variable
size_NA_num <- all_data %>%
filter(is.na(size)) %>%
nrow()
efficiency_NA_num <- all_data %>%
filter(is.na(efficiency)) %>%
nrow()
tfx_response_NA_num <- all_data %>%
filter(is.na(tfx_response)) %>%
nrow()
# Inspect the conditions for the variables that have NA values
summary(all_data %>%
filter(is.na(tfx_response)))
summary(all_data %>%
filter(cell_type == 'Lung' & nucleic_acid == 'DNA' & plate_number == '2' & !is.na(tfx_response)))
# Remove tfx_response NA values
all_data <- all_data %>%
filter(!is.na(tfx_response))
# Inspect the summary statistics of the tfx_response variable
summary(all_data %>%
select(tfx_response))
# Transform the transfection result to a logarithmic scale
all_data <- all_data %>%
mutate(tfx_response = ifelse(tfx_response < 1, 1, tfx_response)) %>%
mutate(tfx_response = log10(tfx_response))
# Reinspect the transformed transfection response variable
summary(all_data %>%
select(tfx_response))
# Inspect the full data frame
head(all_data, 26)
str(all_data)
summary(all_data)
# Create a data frame containing the initial transfection readings for each condition.
initial_tfx <- all_data %>%
select(formulation_id, cell_type:time, tfx_response) %>%
group_by(formulation_id, cell_type, nucleic_acid, incorporation, dose, plate_number) %>%
filter(time == 0) %>%
mutate(initial_response = tfx_response) %>%
select(-tfx_response, -time)
# Create a data frome containing the average tranfection signal intensity between 24 and 72 hours
twentyfour_seventytwo_tfx <- all_data %>%
select(formulation_id, cell_type:time, tfx_response) %>%
group_by(formulation_id, cell_type, nucleic_acid, incorporation, dose, plate_number) %>%
filter(time >= 24) %>%
summarize(average_response_twenty_four = mean(tfx_response))
# Remove observations where the avearge transfection response was not at least 10 times the initial signal.
all_data_extended <- all_data %>%
full_join(initial_tfx, by = c('formulation_id', 'cell_type', 'nucleic_acid', 'incorporation', 'dose', 'plate_number')) %>%
mutate(initial_response = ifelse(is.na(initial_response), mean(initial_response, na.rm = TRUE), initial_response)) %>%
inner_join(twentyfour_seventytwo_tfx, by = c('formulation_id', 'cell_type', 'nucleic_acid', 'incorporation', 'dose', 'plate_number')) %>%
mutate(signal_to_noise = tfx_response - initial_response) %>%
mutate(responded = ifelse((average_response_twenty_four - initial_response) > 1, 'Responded', 'No Response')) %>%
mutate(quantifiable = ifelse(signal_to_noise > 1, 'Quantifiable', 'Not Quantifiable'))
all_data_extended$responded <- as.factor(all_data_extended$responded)
all_data_extended$quantifiable <- as.factor(all_data_extended$quantifiable)
all_data_responded <- all_data_extended %>%
filter(responded == 'Responded') %>%
select(-responded)
all_data_quantifiable <- all_data_extended %>%
filter(quantifiable == 'Quantifiable') %>%
select(-quantifiable)
# Generate summary statistics for the dose and the time points
time_table <- all_data_responded %>%
group_by(time) %>%
summarize(Count = n(), Min = round(min(tfx_response), 2), Max = round(max(tfx_response), 2), Average = round(mean(tfx_response), 2), SD = round(sd(tfx_response), 2), SE = round(sd(tfx_response)/sqrt(n()), 2), CV = round(sd(tfx_response)/mean(tfx_response), 2))
dose_table <- all_data_responded %>%
group_by(dose) %>%
summarize(Count = n(), Min = round(min(tfx_response), 2), Max = round(max(tfx_response), 2), Average = round(mean(tfx_response), 2), SD = round(sd(tfx_response), 2), SE = round(sd(tfx_response)/sqrt(n()), 2), CV = round(sd(tfx_response)/mean(tfx_response), 2))
# Create a line graph
jpeg('time_dose_average_plot.jpg')
ggplot(all_data_responded%>%rename(Dose = dose), aes(x = time, y = tfx_response, color = Dose)) +
geom_smooth(method = "loess", formula = 'y ~ x') +
labs(x = 'Time (hrs)', y = 'Average Transfection Response') +
theme_minimal() +
theme(
axis.title.x = element_text(size = 18), # Increase x-axis label size
axis.title.y = element_text(size = 18), # Increase y-axis label size
axis.text.x = element_text(size = 16), # Increase x-axis label size
axis.text.y = element_text(size = 16), # Increase y-axis label size,
legend.text = element_text(size = 16),
legend.title = element_text(size = 18)
)
dev.off()
# Create heat map for responders
time_dose_quantifiable_count <- all_data_extended %>%
filter(quantifiable == 'Quantifiable') %>%
group_by(time, dose) %>%
summarize(quantifiable_count = n())
time_dose_all_count <- all_data_extended %>%
group_by(time, dose) %>%
summarize(all_count = n())
time_dose_counts <- time_dose_quantifiable_count %>%
full_join(time_dose_all_count, by = c('time', 'dose')) %>%
mutate(quantifiable_count = ifelse(is.na(quantifiable_count), 0, quantifiable_count)) %>%
mutate(percent_responded = (quantifiable_count/all_count)*100) %>%
rename(Time = time, Dose = dose, Percent = percent_responded)
jpeg('time_dose_counts_plot.jpg')
ggplot(time_dose_counts, aes(x = Time, y = Percent, color = Dose)) +
geom_smooth(method = "loess", formula = 'y ~ x') +
labs(x = 'Time (hrs)', y = 'Percent Quantifiable') +
theme_minimal() +
theme(
axis.title.x = element_text(size = 18), # Increase x-axis label size
axis.title.y = element_text(size = 18), # Increase y-axis label size
axis.text.x = element_text(size = 16), # Increase x-axis label size
axis.text.y = element_text(size = 16), # Increase y-axis label size,
legend.text = element_text(size = 16),
legend.title = element_text(size = 18)
)
dev.off()
# Print the results of the visualizations for research question 1
kable(dose_table)
kable(time_table)
#time_dose_average_plot
#time_dose_counts_plot
dose_counts <- all_data_extended %>%
group_by(dose, responded) %>%
summarize(Count = n()) %>%
rename(Dose = dose, Responded = responded)
jpeg('percent_respoded.jpg')
ggplot(dose_counts, aes(x = Dose, y = Count, fill = Responded)) +
geom_bar(stat = 'identity') +
theme_minimal() +
theme(
axis.title.x = element_text(size = 18), # Increase x-axis label size
axis.title.y = element_text(size = 18), # Increase y-axis label size
axis.text.x = element_text(size = 16), # Increase x-axis label size
axis.text.y = element_text(size = 16), # Increase y-axis label size,
legend.text = element_text(size = 16),
legend.title = element_text(size = 18)
)
dev.off()
time_dose_data <- all_data_responded %>%
select(time, dose, tfx_response, quantifiable) %>% filter (time != 72)
time_dose_data$time <- as.factor(time_dose_data$time)
time_dose_counts <- time_dose_data %>%
group_by(time, quantifiable) %>%
summarize(Count = n()) %>%
rename(Time = time, Quantifiable = quantifiable)
jpeg('time_respoded.jpg')
ggplot(time_dose_counts, aes(x = Time, y = Count, fill = Quantifiable)) +
geom_bar(stat = 'identity') +
theme_minimal() +
theme(
axis.title.x = element_text(size = 18), # Increase x-axis label size
axis.title.y = element_text(size = 18), # Increase y-axis label size
axis.text.x = element_text(size = 14), # Increase x-axis label size
axis.text.y = element_text(size = 14), # Increase y-axis label size,
legend.text = element_text(size = 16),
legend.title = element_text(size = 18)
)
dev.off()
# Create cummary statistics for table
category_data <- all_data_responded %>%
ungroup() %>%
select(incorporation, nucleic_acid, cell_type, tfx_response) %>%
group_by(cell_type, incorporation, nucleic_acid) %>%
summarize(Average = round(mean(tfx_response), 2), SD = round(sd(tfx_response), 2), Count = n(), SE = round(sd(tfx_response)/sqrt(n()), 2), Min = round(min(tfx_response), 2), Max = round(max(tfx_response), 2)) %>%
suppressWarnings()
# Create data frame for chord diagram
chord_frame_average <- select(category_data,incorporation, cell_type, nucleic_acid, Average)
chord_frame_count <- select(category_data,incorporation, cell_type, nucleic_acid, Count)
# Create the box plot
category_box <- ggplot(all_data_responded, aes(x = nucleic_acid, y = tfx_response, fill = incorporation)) +
geom_boxplot(position = 'Dodge', color = 'black') +
labs(x = 'Nucleic Acid Type', y = 'Response', fill = 'Incorporation Strategy') +
scale_fill_manual(values = c("Adsorbed" = "lightblue", "Encapsulated" = "pink")) +
facet_grid(. ~ cell_type) +
theme_minimal()
# Create the histogram for mRNA samples
category_hist_rna <- ggplot(filter(all_data_responded, nucleic_acid == 'mRNA'), aes(x = tfx_response)) +
geom_histogram(fill = 'lightblue', color = 'black') +
labs(x = 'Response', y = 'Count') +
facet_grid(incorporation ~ cell_type) +
theme_minimal()
# Create the histogram for DNA samples
category_hist_dna <- ggplot(filter(all_data_responded, nucleic_acid == 'DNA'), aes(x = tfx_response)) +
geom_histogram(fill = 'lightblue', color = 'black', binwidth = 0.5) +
labs(x = 'Response', y = 'Count') +
facet_grid(incorporation ~ cell_type) +
theme_minimal()
# Print out summary statistics table
kable(category_data %>%
rename(Incorporation = incorporation,
'Nucleic Acid Type' = nucleic_acid,
'Cell Type' = cell_type))
# Print out other plots
chordDiagram(chord_frame_average, col = ifelse(chord_frame_average$nucleic_acid == 'DNA', 'darkblue', "red"))
chordDiagram(chord_frame_count, col = ifelse(chord_frame_count$nucleic_acid == 'DNA', 'darkblue', "red"))
category_box
category_hist_rna
category_hist_dna
#bar_layout <- ggplot(category_data, aes(x = nucleic_acid, y = avg_response, fill = incorporation)) +
#                     geom_bar(position = 'Dodge', stat = 'identity', color = 'black') +
#                     labs(x = 'Nucleic Acid Type', y = 'Response', fill = 'Incorporation Strategy') +
#                     scale_fill_manual(values = c("Adsorbed" = "lightblue", "Encapsulated" = "pink")) +
#                     facet_grid(. ~ cell_type) +
#                     theme_minimal()
jpeg('chord_average.jpg')
chordDiagram(chord_frame_average, col = ifelse(chord_frame_average$nucleic_acid == 'DNA', 'darkblue', "red"))
dev.off()
jpeg('chord_count.jpg')
chordDiagram(chord_frame_count, col = ifelse(chord_frame_count$nucleic_acid == 'DNA', 'darkblue', "red"))
dev.off()
my_plot <-ggplot(category_data, aes(x = nucleic_acid, y = Average, fill = incorporation)) +
geom_bar(position = 'Dodge', stat = 'identity', color = 'black') +
labs(x = 'Nucleic Acid Type', y = 'Average Response', fill = 'Incorporation Strategy') +
scale_fill_manual(values = c("Adsorbed" = "lightblue", "Encapsulated" = "pink")) +
facet_grid(. ~ cell_type) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16), # Increase x-axis label size
axis.title.y = element_text(size = 16), # Increase y-axis label size
axis.text.x = element_text(size = 12), # Increase x-axis label size
axis.text.y = element_text(size = 12), # Increase y-axis label size,
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
strip.text = element_text(size = 16)
)
ggsave("bar_chart.jpg", plot = my_plot, width = 8, height = 6, units = "in", dpi = 300)
# Pairwise Plotting
cell_type_filtered <- all_data_responded %>%
ungroup() %>%
filter(dose == 'High') %>%
filter(time == 48) %>%
filter((cell_type == 'Liver' & incorporation == 'Encapsulated' & nucleic_acid == 'mRNA') |
(cell_type == 'Lung' & incorporation == 'Adsorbed' & nucleic_acid == 'DNA') |
(cell_type == 'Muscle' & incorporation == 'Encapsulated' & nucleic_acid == 'mRNA') |
(cell_type == 'Immune' & incorporation == 'Adsorbed' & nucleic_acid == 'mRNA'))
formulation_response_summary <- cell_type_filtered %>%
ungroup() %>%
select(DSPC:MC3, tfx_response) %>%
rename(PEG = DMG.PEG, Cholesterol = Chol, Response = tfx_response) %>%
group_by(DSPC, PEG, Cholesterol, DOTAP, MC3) %>%
summarize(Average = mean(Response), Count = n())
formulation_percent_response <- cell_type_filtered %>%
ungroup() %>%
select(DSPC:MC3, cell_type, tfx_response) %>%
rename(PEG = DMG.PEG, Cholesterol = Chol, Response = tfx_response) %>%
gather(DSPC, PEG, Cholesterol, DOTAP, MC3,key = 'lipid', value = 'Percent') %>%
group_by(lipid, Percent, cell_type) %>%
summarize(Response = mean(Response))
formulation_response <- cell_type_filtered %>%
ungroup() %>%
select(DSPC:MC3, cell_type, tfx_response) %>%
rename(PEG = DMG.PEG, Cholesterol = Chol, Response = tfx_response)
formulation_response_lung <- formulation_response %>%
filter(cell_type == 'Lung') %>%
select(-cell_type)
formulation_response_liver <- formulation_response %>%
filter(cell_type == 'Liver') %>%
select(-cell_type)
formulation_response_muscle <- formulation_response %>%
filter(cell_type == 'Muscle') %>%
select(-cell_type)
formulation_response_immune <- formulation_response %>%
filter(cell_type == 'Immune') %>%
select(-cell_type)
formulation_plot <- ggplot(formulation_percent_response, aes(x = Percent, y = Response)) +
geom_point() +
geom_smooth(method = 'lm', formula = 'y ~ x') +
facet_grid(cell_type ~ lipid) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16), # Increase x-axis label size
axis.title.y = element_text(size = 16), # Increase y-axis label size
axis.text.x = element_text(size = 12), # Increase x-axis label size
axis.text.y = element_text(size = 12), # Increase y-axis label size,
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
strip.text = element_text(size = 16)
)
ggsave('formulation.jpg', plot = formulation_plot)
#formulation_response_plot
# Define matrix of aggregate mean transfection reponse for each formulation
size_efficiency_tfx <- all_data %>%
group_by(formulation_id) %>%
summarize(Size = mean(size), Efficiency = mean(efficiency), Response = mean(tfx_response))
# Define the label for the associated 3D scatterplot
size_efficiency_tfx$label <- paste0("Size (nm)", round(size_efficiency_tfx$Size),
"<br>Efficiency (%)", round(size_efficiency_tfx$Efficiency, 1),
"<br>Response", format(round(size_efficiency_tfx$Response), big.mark = ","))
# Create a 3D scatter plot for all data
size_efficiency_tfx_3D <- plot_ly(data = size_efficiency_tfx, x = ~Size, y = ~Efficiency, z = ~Response,
type = 'scatter3d', mode = 'markers',  text = ~label,  hoverinfo = 'text',
marker = list(size = 4, color = ~Response, colorscale = 'Viridis'))
# Define matrix of aggregate mean transfection reponse for each formulation that responded
size_efficiency_tfx_responder <- all_data_responded %>%
group_by(formulation_id) %>%
summarize(Size = mean(size), Efficiency = mean(efficiency),
Response = mean(tfx_response))
# Define the label for the associated 3D scatterplot
size_efficiency_tfx_responder$label <- paste0("Size (nm)", round(size_efficiency_tfx_responder$Size),
"<br>Efficiency (%)", round(size_efficiency_tfx_responder$Efficiency, 1),
"<br>Response", format(round(size_efficiency_tfx_responder$Response), big.mark = ","))
# Create a 3D scatter plot for all data
size_efficiency_tfx_responder_3D <- plot_ly(data = size_efficiency_tfx_responder, x = ~Size,
y = ~Efficiency, z = ~Response, type = 'scatter3d',
mode = 'markers',  text = ~label,  hoverinfo = 'text',
marker = list(size = 4, color = ~Response,
colorscale = 'Viridis'))
# Pairwise Plotting
jpeg('linear_regression.jpeg')
par(mfrow = c(1, 2))
plot(size_efficiency_tfx_responder$Efficiency, size_efficiency_tfx_responder$Response,
xlab = 'Efficiency (%)', ylab = 'Response')
plot(size_efficiency_tfx_responder$Size, size_efficiency_tfx_responder$Response,
xlab = 'Size (nm)', ylab = 'Response')
par(mfrow = c(1, 1))
dev.off()
# Display 3D scatterplots
size_efficiency_tfx_responder_3D
jpeg('3D.jpeg')
plot_ly(data = size_efficiency_tfx_responder, x = ~Size,
y = ~Efficiency, z = ~Response, type = 'scatter3d',
mode = 'markers',  text = ~label,  hoverinfo = 'text',
marker = list(size = 4, color = ~Response,
colorscale = 'Viridis'))
dev.off()
time_dose_data <- all_data_responded %>%
select(time, dose, tfx_response) %>%
filter(time > 36 & time < 66)
time_dose_data$time <- as.factor(time_dose_data$time)
time_dose_ANOVA <- aov(tfx_response ~ time * dose, data = time_dose_data)
summary(time_dose_ANOVA)
time_dose_tukey <- TukeyHSD(time_dose_ANOVA)
time_dose_tukey
# Select required data
category_data_mrna <- all_data_responded %>%
select(cell_type, incorporation, nucleic_acid, tfx_response) %>%
filter(nucleic_acid == 'mRNA') %>%
select(-nucleic_acid)
category_data_liver_lung <- all_data_responded %>%
select(cell_type, incorporation, nucleic_acid, tfx_response) %>%
filter(cell_type == 'Lung' | cell_type == 'Liver') %>%
filter(cell_type != 'Immune' & cell_type != 'Muscle') %>%
droplevels()
category_mrna_ANOVA <- aov(tfx_response ~ cell_type * incorporation, data = category_data_mrna)
summary(category_mrna_ANOVA)
category_liver_lung_ANOVA <- aov(tfx_response ~ nucleic_acid * cell_type * incorporation, data = category_data_liver_lung)
summary(category_liver_lung_ANOVA)
category_mrna_shapiro <- ks.test(category_mrna_ANOVA$residuals, 'pnorm')
category_liver_lung_shapiro <- ks.test(category_liver_lung_ANOVA$residuals, 'pnorm')
qqnorm(category_mrna_ANOVA$residuals)
qqnorm(category_liver_lung_ANOVA$residuals)
category_mrna_tukey <- TukeyHSD(category_mrna_ANOVA)
category_liver_lung_tukey <- TukeyHSD(category_mrna_ANOVA)
category_mrna_levene <- leveneTest(tfx_response ~ cell_type * incorporation, data = category_data_mrna)
category_liver_lung_levene <- leveneTest(tfx_response ~ nucleic_acid * cell_type * incorporation, data = category_data_liver_lung)
#category_mrna_tukey
category_liver_lung_tukey
category_mrna_table <- category_data_mrna %>%
group_by(incorporation, cell_type) %>%
summarize(Count = n())
category_liver_lung_table <- category_data_liver_lung %>%
group_by(incorporation, nucleic_acid, cell_type) %>%
summarize(Count = n())
kable(category_liver_lung_table)
kable(category_mrna_table)
category_mrna_ANOVA_robust <- t2way(tfx_response ~ cell_type * incorporation, data = category_data_mrna)
category_liver_lung_ANOVA_robust <- t3way(formula = tfx_response ~ nucleic_acid + cell_type + incorporation, data = category_data_liver_lung)
category_mrna_ANOVA_robust
category_liver_lung_ANOVA_robust
if(!require(mixexp)){
install.packages('mixexp')
}
if(!require(Ternary)){
install.packages('Ternary')
}
library(mixexp)
library(Ternary)
lung_model <- MixModel(formulation_response_lung, 'Response', mixcomps = c('DOTAP','MC3', 'PEG', 'Cholesterol', 'DSPC'), 1)
summary(lung_model)
plot(lung_model$residuals)
lung_plot <- ModelEff(nfac = 5, mod = 1, dir = 2, ufunc = lung_model,
dimensions = list("DOTAP", "MC3", "PEG", "Cholesterol", "DSPC"))
liver_model <- MixModel(formulation_response_liver, 'Response', mixcomps = c('DOTAP','MC3', 'PEG', 'Cholesterol', 'DSPC'), 1)
summary(liver_model)
plot(liver_model$residuals)
liver_plot <- ModelEff(nfac = 5, mod = 1, dir = 2, ufunc = liver_model,
dimensions = list("DOTAP", "MC3", "PEG", "Cholesterol", "DSPC"))
muscle_model <- MixModel(formulation_response_muscle, 'Response', mixcomps = c('DOTAP','MC3', 'PEG', 'Cholesterol', 'DSPC'), 1)
summary(muscle_model)
plot(liver_model$residuals)
muscle_plot <- ModelEff(nfac = 5, mod = 1, dir = 2, ufunc = muscle_model,
dimensions = list("DOTAP", "MC3", "PEG", "Cholesterol", "DSPC"))
immune_model <- MixModel(formulation_response_immune, 'Response', mixcomps = c('DOTAP','MC3', 'PEG', 'Cholesterol', 'DSPC'), 1)
summary(immune_model)
plot(liver_model$residuals)
immune_plot <- ModelEff(nfac = 5, mod = 1, dir = 2, ufunc = immune_model,
dimensions = list("DOTAP", "MC3", "PEG", "Cholesterol", "DSPC"))
par(mfrow = c(1, 4))
lung_plot
liver_plot
muscle_plot
immune_plot
par(mfrow = c(1, 1))
jpeg('liver.jpg')
ModelEff(nfac = 5, mod = 1, dir = 2, ufunc = liver_model,
dimensions = list("DOTAP", "MC3", "PEG", "Cholesterol", "DSPC"))
dev.off()
jpeg('lung.jpg')
ModelEff(nfac = 5, mod = 1, dir = 2, ufunc = lung_model,
dimensions = list("DOTAP", "MC3", "PEG", "Cholesterol", "DSPC"))
dev.off()
jpeg('muscle.jpg')
ModelEff(nfac = 5, mod = 1, dir = 2, ufunc = muscle_model,
dimensions = list("DOTAP", "MC3", "PEG", "Cholesterol", "DSPC"))
dev.off()
jpeg('immune.jpg')
ModelEff(nfac = 5, mod = 1, dir = 2, ufunc = immune_model,
dimensions = list("DOTAP", "MC3", "PEG", "Cholesterol", "DSPC"))
dev.off()
## Linear model of response vs. size or efficiency For all data
# Define simple linear model
size_efficiency_tfx_model <- lm(Response ~ Size + Efficiency, data = size_efficiency_tfx)
summary(size_efficiency_tfx_model)
# Run ANOVa on linear model variables
size_efficiency_tfx_anova <- aov(Response ~ Size * Efficiency, data = size_efficiency_tfx)
summary(size_efficiency_tfx_anova)
# Correlation Matrix Plotting
pairs(~ Response + Efficiency + Size, pch = 20, data = size_efficiency_tfx, lower.panel = NULL )
# Pairwise Plotting
par(mfrow = c(1, 2))
plot(size_efficiency_tfx$Efficiency, size_efficiency_tfx$Response, xlab = 'Efficiency (%)', ylab = 'Response')
plot(size_efficiency_tfx$Size, size_efficiency_tfx$Response, xlab = 'Size (nm)', ylab = 'Response')
par(mfrow = c(1, 1))
MY_PLOT2 <-ggplot(size_efficiency_tfx, aes(x = Size, y = Response)) +
geom_point() +
geom_smooth(method = 'lm', formula = 'y ~ x') +
labs(x = 'Size (nm)', y = 'Response') +
theme(
axis.title.x = element_text(size = 16), # Increase x-axis label size
axis.title.y = element_text(size = 16), # Increase y-axis label size
axis.text.x = element_text(size = 12), # Increase x-axis label size
axis.text.y = element_text(size = 12), # Increase y-axis label size,
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
strip.text = element_text(size = 16)
) +
theme_minimal()
ggsave('size.jpg', plot = MY_PLOT2)
MY_PLOT3 <-ggplot(size_efficiency_tfx, aes(x = Efficiency, y = Response)) +
geom_point() +
geom_smooth(method = 'lm', formula = 'y ~ x') +
labs(x = 'Size (nm)', y = 'Response') +
theme(
axis.title.x = element_text(size = 16), # Increase x-axis label size
axis.title.y = element_text(size = 16), # Increase y-axis label size
axis.text.x = element_text(size = 14), # Increase x-axis label size
axis.text.y = element_text(size = 14), # Increase y-axis label size,
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
strip.text = element_text(size = 16)
) +
theme_minimal()
ggsave('incorporation.jpg', plot = MY_PLOT3)
# Calculate VIF manually
out1 <- lm(Size ~ Efficiency, data = size_efficiency_tfx)
R_Squared <- summary(out1)$r.squared
out2 <- size_efficiency_tfx_model
VIF <- 1 / (1-R_Squared)
VIF
# Calculate the VIF with car package
vif(out2)
## Linear model of response vs. size or efficiency For responders only
# Define simple linear model
size_efficiency_tfx_responder_model <- lm(Response ~ Size + Efficiency, data = size_efficiency_tfx_responder)
summary(size_efficiency_tfx_model)
# Run ANOVa on linear model variables
size_efficiency_tfx_responder_anova <- aov(Response ~ Size + Efficiency, data = size_efficiency_tfx_responder)
summary(size_efficiency_tfx_responder_anova)
# Calculate VIF manually
out1_responder <- lm(Size ~ Efficiency, data = size_efficiency_tfx_responder)
R_Squared_responder <- summary(out1)$r.squared
out2_responder <- size_efficiency_tfx_responder_model
VIF_responder <- 1 / (1-R_Squared_responder)
VIF_responder
# Calculate the VIF with car package
vif(out2_responder)
